{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(cp:*)",
      "Bash(node:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(npm start)",
      "Bash(npm test)",
      "Bash(npm install)",
      "Bash(npm run behavioral-test:*)",
      "Bash(find:*)",
      "Bash(rm:*)",
      "Bash(npm cache clean:*)",
      "Bash(npm config set:*)",
      "Bash(npm install:*)",
      "Bash(export ELECTRON_CACHE=/tmp/electron-cache)",
      "Bash(ELECTRON_MIRROR=https://github.com/electron/electron/releases/download/ npm install electron)",
      "Bash(unset:*)",
      "Bash(export NODE_TLS_REJECT_UNAUTHORIZED=0)",
      "Bash(npx:*)",
      "Bash(DEBUG=*)",
      "Bash(npm config:*)",
      "Bash(env)",
      "Bash(bash:*)",
      "Bash(timeout 30s npm install electron-store papaparse uuid xlsx --save --no-audit --no-fund)",
      "Bash(npm run build:mac:*)",
      "Bash(sips:*)",
      "Bash(npm run test:all:*)",
      "Bash(mv:*)",
      "Bash(npm run dev:*)",
      "Bash(killall:*)",
      "Bash(pkill:*)",
      "Bash(npm test:*)",
      "Bash(timeout 60s npm test:*)",
      "Bash(npm run test:e2e:*)",
      "Bash(cat:*)",
      "Bash(timeout 30s npm run test:e2e:*)",
      "Bash(claude mcp:*)",
      "mcp__serena__search_for_pattern",
      "mcp__serena__find_symbol",
      "mcp__serena__replace_regex",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__list_dir",
      "mcp__serena__write_memory",
      "mcp__serena__get_symbols_overview",
      "Bash(npm run:*)",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__serena__read_memory",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__find_file",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__insert_before_symbol",
      "mcp__serena__find_referencing_symbols",
      "Bash(git rm:*)",
      "Bash(true)"
    ],
    "deny": []
  }
}