const { Before, After, BeforeAll, AfterAll, Status } = require('@cucumber/cucumber');
const path = require('path');
const fs = require('fs');
const sharedBrowserManager = require('./shared-browser');

/**
 * Global setup before all scenarios
 */
BeforeAll(async function() {
  console.log('üöÄ Starting Software Estimation Manager test suite');
  
  // Ensure reports directory exists
  const reportsDir = path.join(__dirname, '../../reports');
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir, { recursive: true });
  }
  
  // Clean up any previous test artifacts
  await cleanupTestArtifacts();
});

/**
 * Setup before each scenario - USA ISTANZA CONDIVISA
 */
Before(async function(scenario) {
  this.log(`üìù Starting scenario: ${scenario.pickle.name}`);
  
  // Reset test context
  this.resetTestContext();
  
  // Ottieni browser e pagina condivisi (riusa la stessa istanza)
  this.page = await sharedBrowserManager.getPage();
  this.browser = await sharedBrowserManager.getBrowser();
  this.isAppRunning = true;
  
  // Reset stato applicazione per scenario pulito
  await sharedBrowserManager.resetAppState();
  
  this.log('‚úÖ Scenario setup complete (using shared browser)');
});

/**
 * Cleanup after each scenario - NON CHIUDE BROWSER
 */
After(async function(scenario) {
  this.log(`üìã Finishing scenario: ${scenario.pickle.name} - Status: ${scenario.result.status}`);
  
  // Take screenshot on failure using shared browser
  if (scenario.result.status === Status.FAILED) {
    await sharedBrowserManager.takeScreenshot(`failed-${scenario.pickle.name.replace(/[^a-zA-Z0-9]/g, '-')}`);
    
    // Log error details
    if (this.testContext.lastError) {
      this.log(`‚ùå Last error: ${JSON.stringify(this.testContext.lastError, null, 2)}`);
    }
  }
  
  // NON chiudiamo il browser - solo reset dello stato
  // Il browser condiviso resta aperto per il prossimo scenario
  
  this.log('üßπ Scenario cleanup complete (browser stays open)');
});

/**
 * Global cleanup after all scenarios - CHIUDE BROWSER CONDIVISO
 */
AfterAll(async function() {
  console.log('üèÅ Software Estimation Manager test suite completed');
  
  // Chiudi il browser condiviso SOLO alla fine di tutti i test
  await sharedBrowserManager.cleanup();
  
  // Generate final test report summary
  await generateTestSummary();
});

// Reset application state now handled by SharedBrowserManager

/**
 * Clean up test artifacts from previous runs
 */
async function cleanupTestArtifacts() {
  const artifactDirs = [
    path.join(__dirname, '../../reports'),
    path.join(__dirname, '../../temp-test-files')
  ];
  
  for (const dir of artifactDirs) {
    if (fs.existsSync(dir)) {
      try {
        fs.rmSync(dir, { recursive: true, force: true });
        console.log(`üßπ Cleaned up ${dir}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Could not clean up ${dir}: ${error.message}`);
      }
    }
  }
}

/**
 * Generate test execution summary
 */
async function generateTestSummary() {
  const summaryPath = path.join(__dirname, '../../reports/test-summary.md');
  
  const summary = `# Test Execution Summary

## Overview
- **Execution Time**: ${new Date().toISOString()}
- **Test Suite**: Software Estimation Manager Cucumber Tests
- **Framework**: Cucumber.js + Electron Testing

## Test Coverage
This test suite covers all 9 feature areas:
1. **Project Management** - Project lifecycle and state management
2. **Feature Management** - CRUD operations and calculations  
3. **Configuration Management** - Hierarchical configuration system
4. **Project Phases Management** - 8-phase project planning
5. **Data Persistence** - File operations and validation
6. **Export Functionality** - Multi-format export capabilities
7. **UI Interactions** - Modal and navigation management
8. **Version Management** - Project versioning and comparison
9. **Bugs and Known Issues** - Documented behavioral quirks

## Key Test Behaviors
- **Electron Application Testing**: Full desktop app automation
- **Real-time Calculations**: Formula validation and edge cases
- **Data Validation**: Business rule enforcement
- **File Operations**: Export and persistence testing
- **UI State Management**: Modal, navigation, and form interactions

## Notes
- Tests document current behavior (including known bugs)
- Screenshots captured on test failures
- Application state reset between scenarios
- Comprehensive fixture data for consistent testing

Generated by Software Estimation Manager Test Suite
`;
  
  try {
    fs.writeFileSync(summaryPath, summary);
    console.log(`üìä Test summary generated: ${summaryPath}`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è  Could not generate test summary: ${error.message}`);
  }
}